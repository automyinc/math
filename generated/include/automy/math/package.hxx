
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_automy_math_PACKAGE_HXX_
#define INCLUDE_automy_math_PACKAGE_HXX_

#include <vnx/Type.h>


#ifdef AUTOMY_MATH_EXPORT_ENABLE
#include <automy_math_export.h>
#else
#ifndef AUTOMY_MATH_EXPORT
#define AUTOMY_MATH_EXPORT
#endif
#endif


namespace automy {
namespace math {

void register_all_types();


class Matrix2d;
class Matrix3d;
class Matrix3f;
class Matrix4d;
class Matrix4f;
class MatrixXd;
class MatrixXf;
class Vector2d;
class Vector2f;
class Vector2i;
class Vector3d;
class Vector3f;
class Vector3i;
class Vector4d;
class Vector4f;
class Vector4i;
class Vector4uc;


} // namespace automy
} // namespace math


namespace vnx {

void read(TypeInput& in, ::automy::math::Matrix2d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Matrix3d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Matrix3f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Matrix4d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Matrix4f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::MatrixXd& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::MatrixXf& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector2d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector2f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector2i& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector3d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector3f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector3i& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector4d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector4f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector4i& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::math::Vector4uc& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::automy::math::Matrix2d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Matrix3d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Matrix3f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Matrix4d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Matrix4f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::MatrixXd& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::MatrixXf& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector2d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector2f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector2i& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector3d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector3f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector3i& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector4d& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector4f& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector4i& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::math::Vector4uc& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::automy::math::Matrix2d& value); ///< \private
void read(std::istream& in, ::automy::math::Matrix3d& value); ///< \private
void read(std::istream& in, ::automy::math::Matrix3f& value); ///< \private
void read(std::istream& in, ::automy::math::Matrix4d& value); ///< \private
void read(std::istream& in, ::automy::math::Matrix4f& value); ///< \private
void read(std::istream& in, ::automy::math::MatrixXd& value); ///< \private
void read(std::istream& in, ::automy::math::MatrixXf& value); ///< \private
void read(std::istream& in, ::automy::math::Vector2d& value); ///< \private
void read(std::istream& in, ::automy::math::Vector2f& value); ///< \private
void read(std::istream& in, ::automy::math::Vector2i& value); ///< \private
void read(std::istream& in, ::automy::math::Vector3d& value); ///< \private
void read(std::istream& in, ::automy::math::Vector3f& value); ///< \private
void read(std::istream& in, ::automy::math::Vector3i& value); ///< \private
void read(std::istream& in, ::automy::math::Vector4d& value); ///< \private
void read(std::istream& in, ::automy::math::Vector4f& value); ///< \private
void read(std::istream& in, ::automy::math::Vector4i& value); ///< \private
void read(std::istream& in, ::automy::math::Vector4uc& value); ///< \private

void write(std::ostream& out, const ::automy::math::Matrix2d& value); ///< \private
void write(std::ostream& out, const ::automy::math::Matrix3d& value); ///< \private
void write(std::ostream& out, const ::automy::math::Matrix3f& value); ///< \private
void write(std::ostream& out, const ::automy::math::Matrix4d& value); ///< \private
void write(std::ostream& out, const ::automy::math::Matrix4f& value); ///< \private
void write(std::ostream& out, const ::automy::math::MatrixXd& value); ///< \private
void write(std::ostream& out, const ::automy::math::MatrixXf& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector2d& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector2f& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector2i& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector3d& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector3f& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector3i& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector4d& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector4f& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector4i& value); ///< \private
void write(std::ostream& out, const ::automy::math::Vector4uc& value); ///< \private

void accept(Visitor& visitor, const ::automy::math::Matrix2d& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Matrix3d& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Matrix3f& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Matrix4d& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Matrix4f& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::MatrixXd& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::MatrixXf& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector2d& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector2f& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector2i& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector3d& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector3f& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector3i& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector4d& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector4f& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector4i& value); ///< \private
void accept(Visitor& visitor, const ::automy::math::Vector4uc& value); ///< \private

/// \private
template<>
struct type<::automy::math::Matrix2d> {
	void read(TypeInput& in, ::automy::math::Matrix2d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Matrix2d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Matrix2d& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Matrix2d& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Matrix2d& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix2d& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Matrix3d> {
	void read(TypeInput& in, ::automy::math::Matrix3d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Matrix3d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Matrix3d& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Matrix3d& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Matrix3d& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix3d& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Matrix3f> {
	void read(TypeInput& in, ::automy::math::Matrix3f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Matrix3f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Matrix3f& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Matrix3f& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Matrix3f& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix3f& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Matrix4d> {
	void read(TypeInput& in, ::automy::math::Matrix4d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Matrix4d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Matrix4d& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Matrix4d& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Matrix4d& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix4d& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Matrix4f> {
	void read(TypeInput& in, ::automy::math::Matrix4f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Matrix4f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Matrix4f& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Matrix4f& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Matrix4f& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix4f& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::MatrixXd> {
	void read(TypeInput& in, ::automy::math::MatrixXd& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::MatrixXd& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::MatrixXd& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::MatrixXd& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::MatrixXd& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::MatrixXd& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::MatrixXf> {
	void read(TypeInput& in, ::automy::math::MatrixXf& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::MatrixXf& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::MatrixXf& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::MatrixXf& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::MatrixXf& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::MatrixXf& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector2d> {
	void read(TypeInput& in, ::automy::math::Vector2d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector2d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector2d& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector2d& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector2d& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector2d& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector2f> {
	void read(TypeInput& in, ::automy::math::Vector2f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector2f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector2f& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector2f& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector2f& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector2f& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector2i> {
	void read(TypeInput& in, ::automy::math::Vector2i& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector2i& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector2i& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector2i& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector2i& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector2i& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector3d> {
	void read(TypeInput& in, ::automy::math::Vector3d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector3d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector3d& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector3d& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector3d& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector3d& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector3f> {
	void read(TypeInput& in, ::automy::math::Vector3f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector3f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector3f& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector3f& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector3f& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector3f& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector3i> {
	void read(TypeInput& in, ::automy::math::Vector3i& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector3i& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector3i& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector3i& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector3i& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector3i& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector4d> {
	void read(TypeInput& in, ::automy::math::Vector4d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector4d& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector4d& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector4d& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector4d& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4d& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector4f> {
	void read(TypeInput& in, ::automy::math::Vector4f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector4f& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector4f& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector4f& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector4f& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4f& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector4i> {
	void read(TypeInput& in, ::automy::math::Vector4i& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector4i& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector4i& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector4i& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector4i& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4i& value, bool special = false);
};

/// \private
template<>
struct type<::automy::math::Vector4uc> {
	void read(TypeInput& in, ::automy::math::Vector4uc& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::math::Vector4uc& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::math::Vector4uc& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::math::Vector4uc& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::math::Vector4uc& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4uc& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_automy_math_PACKAGE_HXX_
