
// AUTO GENERATED by vnxcppcodegen

#include <automy/math/Matrix2d.hpp>
#include <automy/math/Matrix3d.hpp>
#include <automy/math/Matrix3f.hpp>
#include <automy/math/Matrix4d.hpp>
#include <automy/math/Matrix4f.hpp>
#include <automy/math/MatrixXd.hpp>
#include <automy/math/MatrixXf.hpp>
#include <automy/math/Vector2d.hpp>
#include <automy/math/Vector2f.hpp>
#include <automy/math/Vector2i.hpp>
#include <automy/math/Vector3d.hpp>
#include <automy/math/Vector3f.hpp>
#include <automy/math/Vector3i.hpp>
#include <automy/math/Vector4d.hpp>
#include <automy/math/Vector4f.hpp>
#include <automy/math/Vector4i.hpp>
#include <automy/math/Vector4uc.hpp>

#include <automy/math/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

const TypeCode* type<::automy::math::Matrix2d>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Matrix2d>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Matrix2d());
}

void type<::automy::math::Matrix2d>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix2d& value, bool special) {
	const std::vector<int> tmp = {21, 2, 2, 2, 10};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Matrix3d>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Matrix3d>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Matrix3d());
}

void type<::automy::math::Matrix3d>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix3d& value, bool special) {
	const std::vector<int> tmp = {21, 2, 3, 3, 10};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Matrix3f>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Matrix3f>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Matrix3f());
}

void type<::automy::math::Matrix3f>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix3f& value, bool special) {
	const std::vector<int> tmp = {21, 2, 3, 3, 9};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Matrix4d>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Matrix4d>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Matrix4d());
}

void type<::automy::math::Matrix4d>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix4d& value, bool special) {
	const std::vector<int> tmp = {21, 2, 4, 4, 10};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Matrix4f>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Matrix4f>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Matrix4f());
}

void type<::automy::math::Matrix4f>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Matrix4f& value, bool special) {
	const std::vector<int> tmp = {21, 2, 4, 4, 9};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::MatrixXd>::get_type_code() {
	return nullptr;
}

void type<::automy::math::MatrixXd>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::MatrixXd());
}

void type<::automy::math::MatrixXd>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::MatrixXd& value, bool special) {
	const std::vector<int> tmp = {22, 2, 10};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::MatrixXf>::get_type_code() {
	return nullptr;
}

void type<::automy::math::MatrixXf>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::MatrixXf());
}

void type<::automy::math::MatrixXf>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::MatrixXf& value, bool special) {
	const std::vector<int> tmp = {22, 2, 9};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector2d>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector2d>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector2d());
}

void type<::automy::math::Vector2d>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector2d& value, bool special) {
	const std::vector<int> tmp = {21, 2, 2, 1, 10};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector2f>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector2f>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector2f());
}

void type<::automy::math::Vector2f>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector2f& value, bool special) {
	const std::vector<int> tmp = {21, 2, 2, 1, 9};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector2i>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector2i>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector2i());
}

void type<::automy::math::Vector2i>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector2i& value, bool special) {
	const std::vector<int> tmp = {21, 2, 2, 1, 7};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector3d>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector3d>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector3d());
}

void type<::automy::math::Vector3d>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector3d& value, bool special) {
	const std::vector<int> tmp = {21, 2, 3, 1, 10};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector3f>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector3f>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector3f());
}

void type<::automy::math::Vector3f>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector3f& value, bool special) {
	const std::vector<int> tmp = {21, 2, 3, 1, 9};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector3i>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector3i>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector3i());
}

void type<::automy::math::Vector3i>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector3i& value, bool special) {
	const std::vector<int> tmp = {21, 2, 3, 1, 7};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector4d>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector4d>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector4d());
}

void type<::automy::math::Vector4d>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4d& value, bool special) {
	const std::vector<int> tmp = {21, 2, 4, 1, 10};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector4f>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector4f>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector4f());
}

void type<::automy::math::Vector4f>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4f& value, bool special) {
	const std::vector<int> tmp = {21, 2, 4, 1, 9};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector4i>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector4i>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector4i());
}

void type<::automy::math::Vector4i>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4i& value, bool special) {
	const std::vector<int> tmp = {21, 2, 4, 1, 7};
	code.insert(code.end(), tmp.begin(), tmp.end());}

const TypeCode* type<::automy::math::Vector4uc>::get_type_code() {
	return nullptr;
}

void type<::automy::math::Vector4uc>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::math::Vector4uc());
}

void type<::automy::math::Vector4uc>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::math::Vector4uc& value, bool special) {
	const std::vector<int> tmp = {21, 2, 4, 1, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}


} // namespace vnx


namespace automy {
namespace math {


void register_all_types() {
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;


} // namespace automy
} // namespace math
